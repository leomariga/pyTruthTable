{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is pyTruthTable? pyTruthTable is a python library to create logical tables and make relations between its elements. It makes possible prepositional logic clauses analysis and binary operations to be used in classic logical problems. Features: Uses Pandas Dataframe. Big set of logic operations. Simplified function calls. Automatic column naming. Customizible appearence. Installation Requirements: Python 3 and Pandas . Install with Pypi : pip3 install pyTruthTable Take a look: Example 1 - Binary operations import pyTruthTable as ptt # Initialize t_table = ptt.PyTruthTable([\"A\", \"B\"]) # Create relations t_table.append(\"not\", \"A\") t_table.append(\"and\", \"A\", \"B\") t_table.append(\"or\", 2, \"B\") # Use the column index or name t_table.append(\"xor\", -2, -1) t_table.append(\"nand\", -1, 0, name = \"C\") # Rename column t_table.append(\"equals\", \"C\", \"A\") A B \u00ac A A ^ B \u00ac A v B (A ^ B) \u2295 (\u00ac A v B) C C \u2194 A True True False True True False True True True False False False False False True True False True True False True True True False False False True False True True True False Example 2 - Prepositional logic clauses import pyTruthTable as ptt # Initialize tt = ptt.PyTruthTable([\"Hot\", \"Wet\", \"Rains\"]) # Append new column with specified operation tt.append(\"and\", \"Hot\", \"Wet\") tt.append(\"implies\", 3, \"Rains\") Hot Wet Rains Hot ^ Wet (Hot ^ Wet) \u2192 (Rains) True True True True True True True False True False True False True False True True False False False True False True True False True False True False False True False False True False True False False False False True See more examples here Documentation & other links The amazing documentation is this Github \u1e54age . Source code in the Github repository . Pypi pakage installer License MIT Contributing is awesome! See CONTRIBUTING Contact Developed with :heart: by Leonardo Mariga leomariga@gmail.com Did you like it? Remember to click on :star2: button.","title":"Home"},{"location":"#what-is-pytruthtable","text":"pyTruthTable is a python library to create logical tables and make relations between its elements. It makes possible prepositional logic clauses analysis and binary operations to be used in classic logical problems.","title":"What is pyTruthTable?"},{"location":"#features","text":"Uses Pandas Dataframe. Big set of logic operations. Simplified function calls. Automatic column naming. Customizible appearence.","title":"Features:"},{"location":"#installation","text":"Requirements: Python 3 and Pandas . Install with Pypi : pip3 install pyTruthTable","title":"Installation"},{"location":"#take-a-look","text":"","title":"Take a look:"},{"location":"#example-1-binary-operations","text":"import pyTruthTable as ptt # Initialize t_table = ptt.PyTruthTable([\"A\", \"B\"]) # Create relations t_table.append(\"not\", \"A\") t_table.append(\"and\", \"A\", \"B\") t_table.append(\"or\", 2, \"B\") # Use the column index or name t_table.append(\"xor\", -2, -1) t_table.append(\"nand\", -1, 0, name = \"C\") # Rename column t_table.append(\"equals\", \"C\", \"A\") A B \u00ac A A ^ B \u00ac A v B (A ^ B) \u2295 (\u00ac A v B) C C \u2194 A True True False True True False True True True False False False False False True True False True True False True True True False False False True False True True True False","title":"Example 1 - Binary operations"},{"location":"#example-2-prepositional-logic-clauses","text":"import pyTruthTable as ptt # Initialize tt = ptt.PyTruthTable([\"Hot\", \"Wet\", \"Rains\"]) # Append new column with specified operation tt.append(\"and\", \"Hot\", \"Wet\") tt.append(\"implies\", 3, \"Rains\") Hot Wet Rains Hot ^ Wet (Hot ^ Wet) \u2192 (Rains) True True True True True True True False True False True False True False True True False False False True False True True False True False True False False True False False True False True False False False False True","title":"Example 2 - Prepositional logic clauses"},{"location":"#see-more-examples-here","text":"","title":"See more examples here"},{"location":"#documentation-other-links","text":"The amazing documentation is this Github \u1e54age . Source code in the Github repository . Pypi pakage installer","title":"Documentation &amp; other links"},{"location":"#license","text":"MIT","title":"License"},{"location":"#contributing-is-awesome","text":"See CONTRIBUTING","title":"Contributing is awesome!"},{"location":"#contact","text":"Developed with :heart: by Leonardo Mariga leomariga@gmail.com Did you like it? Remember to click on :star2: button.","title":"Contact"},{"location":"code/","text":"pyTruthTable.pyTruthTable PyTruthTable class PyTruthTable(): | PyTruthTable(names=[], df=pd.DataFrame()) The constructor initialize a Truth Table with a list of names or with a custom dataframe. Initializing with a list of names means generating automatically all possible combination of True and False Arguments : names : Name of the columns. df : Initial Pandas' dataframe. Raises : UserWarning : If the initial df and names are specified simultaneously, the table generation is ignored due to possible table dimention conflicts. Only the initial dataframe is used. Example t_table = ptt.PyTruthTable([\"A\", \"B\", \"C\"]) t_table.table_df A B C True True True True True False True False True True False False False True True False True False False False True False False False set_default_spacing | set_default_spacing() By default, all symbols are spaced from the variable name. set_no_spacing | set_no_spacing() Remove spaces from column's name. By default, all symbols are spaced from the variable name. Examples : t_table = ptt.PyTruthTable([\"A\"]) t_table.append(\"or\", 0, 0) # Simple 'or' operation t_table.set_no_spacing() # Remove spaces t_table.append(\"or\", 0, 0) # Same 'or' operation t_table.table_df A A v A AvA True True True False False False set_default_symbols | set_default_symbols() Name the new column using the default symbols. Notice that some operations does not contain symbols because they are a combination of other symbols. Operation Symbol implies \"\u2192\" nimplies \"\u219b\" converse \"\u2190\" nconverse \"\u219a\" not \"\u00ac\" and \"^\" or \"v\" nor \"\" xor \"\u2295\" xnor \"\" nand \"\" equals \"\u2194\" nequals \"\u21ae\" set_text_symbols | set_text_symbols() Name the new column using the operation name instead of symbol. i.e: When using and operation your new column will be called A and B instead of A ^ B . Operation Text implies \"implies\" nimplies \"not implies\" converse \"converse\" nconverse \"not converse\" not \"not\" and \"and\", or \"or\" nor \"nor\" xor \"xor\" xnor \"xnor\" nand \"nand\" equals \"equals\" nequals \"not equals\" Examples : df = pd.DataFrame([A]) t_table = ptt.PyTruthTable(df=df) t_table.append(\"or\", 0, 0) # Simple 'or' operation t_table.set_text_symbols() # Change to text t_table.append(\"or\", 0, 0) # Same 'or' operation t_table.table_df A A v A A or A True True True False False False generator | generator(names=[]) Generate a combination of True and False columns given a list of names . Arguments : names : Name of the columns. Returns : A dataframe with a binary combination using the list names . Example: t_table = ptt.PyTruthTable() t_table.generator([\"First\", \"Second\"]) First Second True True True False False True False False t_table = ptt.PyTruthTable() t_table.generator([\"First\", \"Second\", \"Third\"]) First Second Third True True True True True False True False True True False False False True True False True False False False True False False False append | append(operation, a_in, b_in=\"\", name=\"\") Make a logical operation with column a_in and b_in . The new column will automatically append to the main dataframe. The new column name can be specified with name . a_in and b_in can be either a column name or number. Arguments : operation : Logical operation to be executed a_in : First column. (Left side) b_in : Second column. (Right side) Raises : NameError : Input column does not exist. NameError : Operation does not exist. ValueError : The operation needs b_in to also be specified append_df | append_df(a_dataframe) Append a custom dataframe to your truth table. The number of rows of a_dataframe must always match the current truth table. Arguments : a_dataframe : Dataframe to append Raises : TypeError : The parameter should be a dataframe RuntimeError : Number of rows of dataframe must match with current truth table column | column(operation, a_in, b_in=\"\", name=\"\") Return a column of logical operation with column a_in and b_in . The new column will NOT append to the main dataframe. The new column name can be specified with name . a_in and b_in can be either a column name or number. Arguments : operation : Logical operation to be executed a_in : First column. (Left side) b_in : Second column. (Right side) Raises : NameError : Input column does not exist. NameError : Operation does not exist. ValueError : The operation needs b_in to also be specified pyTruthTable.Graph","title":"Code"},{"location":"code/#pytruthtablepytruthtable","text":"","title":"pyTruthTable.pyTruthTable"},{"location":"code/#pytruthtable","text":"class PyTruthTable(): | PyTruthTable(names=[], df=pd.DataFrame()) The constructor initialize a Truth Table with a list of names or with a custom dataframe. Initializing with a list of names means generating automatically all possible combination of True and False Arguments : names : Name of the columns. df : Initial Pandas' dataframe. Raises : UserWarning : If the initial df and names are specified simultaneously, the table generation is ignored due to possible table dimention conflicts. Only the initial dataframe is used. Example t_table = ptt.PyTruthTable([\"A\", \"B\", \"C\"]) t_table.table_df A B C True True True True True False True False True True False False False True True False True False False False True False False False","title":"PyTruthTable"},{"location":"code/#set_default_spacing","text":"| set_default_spacing() By default, all symbols are spaced from the variable name.","title":"set_default_spacing"},{"location":"code/#set_no_spacing","text":"| set_no_spacing() Remove spaces from column's name. By default, all symbols are spaced from the variable name. Examples : t_table = ptt.PyTruthTable([\"A\"]) t_table.append(\"or\", 0, 0) # Simple 'or' operation t_table.set_no_spacing() # Remove spaces t_table.append(\"or\", 0, 0) # Same 'or' operation t_table.table_df A A v A AvA True True True False False False","title":"set_no_spacing"},{"location":"code/#set_default_symbols","text":"| set_default_symbols() Name the new column using the default symbols. Notice that some operations does not contain symbols because they are a combination of other symbols. Operation Symbol implies \"\u2192\" nimplies \"\u219b\" converse \"\u2190\" nconverse \"\u219a\" not \"\u00ac\" and \"^\" or \"v\" nor \"\" xor \"\u2295\" xnor \"\" nand \"\" equals \"\u2194\" nequals \"\u21ae\"","title":"set_default_symbols"},{"location":"code/#set_text_symbols","text":"| set_text_symbols() Name the new column using the operation name instead of symbol. i.e: When using and operation your new column will be called A and B instead of A ^ B . Operation Text implies \"implies\" nimplies \"not implies\" converse \"converse\" nconverse \"not converse\" not \"not\" and \"and\", or \"or\" nor \"nor\" xor \"xor\" xnor \"xnor\" nand \"nand\" equals \"equals\" nequals \"not equals\" Examples : df = pd.DataFrame([A]) t_table = ptt.PyTruthTable(df=df) t_table.append(\"or\", 0, 0) # Simple 'or' operation t_table.set_text_symbols() # Change to text t_table.append(\"or\", 0, 0) # Same 'or' operation t_table.table_df A A v A A or A True True True False False False","title":"set_text_symbols"},{"location":"code/#generator","text":"| generator(names=[]) Generate a combination of True and False columns given a list of names . Arguments : names : Name of the columns. Returns : A dataframe with a binary combination using the list names . Example: t_table = ptt.PyTruthTable() t_table.generator([\"First\", \"Second\"]) First Second True True True False False True False False t_table = ptt.PyTruthTable() t_table.generator([\"First\", \"Second\", \"Third\"]) First Second Third True True True True True False True False True True False False False True True False True False False False True False False False","title":"generator"},{"location":"code/#append","text":"| append(operation, a_in, b_in=\"\", name=\"\") Make a logical operation with column a_in and b_in . The new column will automatically append to the main dataframe. The new column name can be specified with name . a_in and b_in can be either a column name or number. Arguments : operation : Logical operation to be executed a_in : First column. (Left side) b_in : Second column. (Right side) Raises : NameError : Input column does not exist. NameError : Operation does not exist. ValueError : The operation needs b_in to also be specified","title":"append"},{"location":"code/#append_df","text":"| append_df(a_dataframe) Append a custom dataframe to your truth table. The number of rows of a_dataframe must always match the current truth table. Arguments : a_dataframe : Dataframe to append Raises : TypeError : The parameter should be a dataframe RuntimeError : Number of rows of dataframe must match with current truth table","title":"append_df"},{"location":"code/#column","text":"| column(operation, a_in, b_in=\"\", name=\"\") Return a column of logical operation with column a_in and b_in . The new column will NOT append to the main dataframe. The new column name can be specified with name . a_in and b_in can be either a column name or number. Arguments : operation : Logical operation to be executed a_in : First column. (Left side) b_in : Second column. (Right side) Raises : NameError : Input column does not exist. NameError : Operation does not exist. ValueError : The operation needs b_in to also be specified","title":"column"},{"location":"code/#pytruthtablegraph","text":"","title":"pyTruthTable.Graph"},{"location":"operations/","text":"Supported operations pyTruthTable Supports the following operations: Operation Text implies \"implies\" nimplies \"not implies\" converse \"converse\" nconverse \"not converse\" not \"not\" and \"and\", or \"or\" nor \"nor\" xor \"xor\" xnor \"xnor\" nand \"nand\" equals \"equals\" nequals \"not equals\" Example all operations df = pd.DataFrame({'A':[True, True, False, False], 'B':[True, False, True, False]}) t_table = ptt.PyTruthTable(df=df) t_table.append(\"not\", 0) t_table.append(\"and\", 0, 1) t_table.append(\"or\", 0, 1) t_table.append(\"xor\", 0, 1) t_table.append(\"nor\", 0, 1) t_table.append(\"nand\", 0, 1) t_table.append(\"xnor\", 0, 1) t_table.append(\"equals\", 0, 1) t_table.append(\"nequals\", 0, 1) t_table.append(\"implies\", 0, 1) t_table.append(\"nimplies\", 0, 1) t_table.append(\"converse\", 0, 1) t_table.append(\"nconverse\", 0, 1) t_table.table_df A B \u00ac A A ^ B A v B A \u2295 B \u00ac (A v B) \u00ac (A ^ B) \u00ac (A \u2295 B) A \u2194 B A \u21ae B A \u2192 B A \u219b B A \u2190 B A \u219a B True True False True True False False False True True False True False True False True False False False True True False True False False True False True True False False True True False True True False True False False True True False False True False False True False False False True True True True False True False True False","title":"Operations"},{"location":"operations/#supported-operations","text":"pyTruthTable Supports the following operations: Operation Text implies \"implies\" nimplies \"not implies\" converse \"converse\" nconverse \"not converse\" not \"not\" and \"and\", or \"or\" nor \"nor\" xor \"xor\" xnor \"xnor\" nand \"nand\" equals \"equals\" nequals \"not equals\"","title":"Supported operations"},{"location":"operations/#example-all-operations","text":"df = pd.DataFrame({'A':[True, True, False, False], 'B':[True, False, True, False]}) t_table = ptt.PyTruthTable(df=df) t_table.append(\"not\", 0) t_table.append(\"and\", 0, 1) t_table.append(\"or\", 0, 1) t_table.append(\"xor\", 0, 1) t_table.append(\"nor\", 0, 1) t_table.append(\"nand\", 0, 1) t_table.append(\"xnor\", 0, 1) t_table.append(\"equals\", 0, 1) t_table.append(\"nequals\", 0, 1) t_table.append(\"implies\", 0, 1) t_table.append(\"nimplies\", 0, 1) t_table.append(\"converse\", 0, 1) t_table.append(\"nconverse\", 0, 1) t_table.table_df A B \u00ac A A ^ B A v B A \u2295 B \u00ac (A v B) \u00ac (A ^ B) \u00ac (A \u2295 B) A \u2194 B A \u21ae B A \u2192 B A \u219b B A \u2190 B A \u219a B True True False True True False False False True True False True False True False True False False False True True False True False False True False True True False False True True False True True False True False False True True False False True False False True False False False True True True True False True False True False","title":"Example all operations"}]}