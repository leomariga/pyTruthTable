{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is pyTruthTable? \u00b6 pyTruthTable is a python library to create logical tables and make relations between its elements. It makes possible prepositional logic clauses analysis and binary operations to be used in classic logical problems. Features: \u00b6 Uses Pandas Dataframe. Big set of logic operations. Simplified function calls. Automatic column naming. Customizible appearence. Installation \u00b6 Requirements: Python 3 and Pandas . Install with Pypi : pip3 install pyTruthTable Take a look: \u00b6 Example 1 - Binary operations \u00b6 import pyTruthTable as ptt # Initialize t_table = ptt . PyTruthTable ([ \"A\" , \"B\" ]) # Create relations t_table . append ( \"not\" , \"A\" ) t_table . append ( \"and\" , \"A\" , \"B\" ) t_table . append ( \"or\" , 2 , \"B\" ) # Use the column index or name t_table . append ( \"xor\" , - 2 , - 1 ) t_table . append ( \"nand\" , - 1 , 0 , name = \"C\" ) # Rename column t_table . append ( \"equals\" , \"C\" , \"A\" ) A B \u00ac A A ^ B \u00ac A v B (A ^ B) \u2295 (\u00ac A v B) C C \u2194 A True True False True True False True True True False False False False False True True False True True False True True True False False False True False True True True False Example 2 - Prepositional logic clauses \u00b6 import pyTruthTable as ptt # Initialize tt = ptt . PyTruthTable ([ \"Hot\" , \"Wet\" , \"Rains\" ]) # Append new column with specified operation tt . append ( \"and\" , \"Hot\" , \"Wet\" ) tt . append ( \"implies\" , 3 , \"Rains\" ) Hot Wet Rains Hot ^ Wet (Hot ^ Wet) \u2192 (Rains) True True True True True True True False True False True False True False True True False False False True False True True False True False True False False True False False True False True False False False False True See more examples here \u00b6 Documentation & other links \u00b6 The amazing documentation is this \u1e54age . Source code in the Github repository . Pypi pakage installer License \u00b6 MIT Contributing is awesome! \u00b6 See CONTRIBUTING Contact \u00b6 Developed with :heart: by Leonardo Mariga leomariga@gmail.com Did you like it? Remember to click on :star2: button.","title":"Home"},{"location":"#what-is-pytruthtable","text":"pyTruthTable is a python library to create logical tables and make relations between its elements. It makes possible prepositional logic clauses analysis and binary operations to be used in classic logical problems.","title":"What is pyTruthTable?"},{"location":"#features","text":"Uses Pandas Dataframe. Big set of logic operations. Simplified function calls. Automatic column naming. Customizible appearence.","title":"Features:"},{"location":"#installation","text":"Requirements: Python 3 and Pandas . Install with Pypi : pip3 install pyTruthTable","title":"Installation"},{"location":"#take-a-look","text":"","title":"Take a look:"},{"location":"#example-1-binary-operations","text":"import pyTruthTable as ptt # Initialize t_table = ptt . PyTruthTable ([ \"A\" , \"B\" ]) # Create relations t_table . append ( \"not\" , \"A\" ) t_table . append ( \"and\" , \"A\" , \"B\" ) t_table . append ( \"or\" , 2 , \"B\" ) # Use the column index or name t_table . append ( \"xor\" , - 2 , - 1 ) t_table . append ( \"nand\" , - 1 , 0 , name = \"C\" ) # Rename column t_table . append ( \"equals\" , \"C\" , \"A\" ) A B \u00ac A A ^ B \u00ac A v B (A ^ B) \u2295 (\u00ac A v B) C C \u2194 A True True False True True False True True True False False False False False True True False True True False True True True False False False True False True True True False","title":"Example 1 - Binary operations"},{"location":"#example-2-prepositional-logic-clauses","text":"import pyTruthTable as ptt # Initialize tt = ptt . PyTruthTable ([ \"Hot\" , \"Wet\" , \"Rains\" ]) # Append new column with specified operation tt . append ( \"and\" , \"Hot\" , \"Wet\" ) tt . append ( \"implies\" , 3 , \"Rains\" ) Hot Wet Rains Hot ^ Wet (Hot ^ Wet) \u2192 (Rains) True True True True True True True False True False True False True False True True False False False True False True True False True False True False False True False False True False True False False False False True","title":"Example 2 - Prepositional logic clauses"},{"location":"#see-more-examples-here","text":"","title":"See more examples here"},{"location":"#documentation-other-links","text":"The amazing documentation is this \u1e54age . Source code in the Github repository . Pypi pakage installer","title":"Documentation &amp; other links"},{"location":"#license","text":"MIT","title":"License"},{"location":"#contributing-is-awesome","text":"See CONTRIBUTING","title":"Contributing is awesome!"},{"location":"#contact","text":"Developed with :heart: by Leonardo Mariga leomariga@gmail.com Did you like it? Remember to click on :star2: button.","title":"Contact"},{"location":"code/","text":"pyTruthTable.pyTruthTable \u00b6 PyTruthTable \u00b6 class PyTruthTable (): | PyTruthTable ( names = [], df = pd . DataFrame ()) The constructor initialize a Truth Table with a list of names or with a custom dataframe. Initializing with a list of names means generating automatically all possible combination of True and False Arguments : names : Name of the columns. df : Initial Pandas' dataframe. Raises : UserWarning : If the initial df and names are specified simultaneously, the table generation is ignored due to possible table dimention conflicts. Only the initial dataframe is used. Example t_table = ptt . PyTruthTable ([ \"A\" , \"B\" , \"C\" ]) t_table . table_df A B C True True True True True False True False True True False False False True True False True False False False True False False False set_default_spacing \u00b6 | set_default_spacing () By default, all symbols are spaced from the variable name. set_no_spacing \u00b6 | set_no_spacing () Remove spaces from column's name. By default, all symbols are spaced from the variable name. Examples : t_table = ptt . PyTruthTable ([ \"A\" ]) t_table . append ( \"or\" , 0 , 0 ) # Simple 'or' operation t_table . set_no_spacing () # Remove spaces t_table . append ( \"or\" , 0 , 0 ) # Same 'or' operation t_table . table_df A A v A AvA True True True False False False set_default_symbols \u00b6 | set_default_symbols () Name the new column using the default symbols. Notice that some operations does not contain symbols because they are a combination of other symbols. Operation Symbol implies \"\u2192\" nimplies \"\u219b\" converse \"\u2190\" nconverse \"\u219a\" not \"\u00ac\" and \"^\" or \"v\" nor \"\" xor \"\u2295\" xnor \"\" nand \"\" equals \"\u2194\" nequals \"\u21ae\" set_text_symbols \u00b6 | set_text_symbols () Name the new column using the operation name instead of symbol. i.e: When using and operation your new column will be called A and B instead of A ^ B . Operation Text implies \"implies\" nimplies \"not implies\" converse \"converse\" nconverse \"not converse\" not \"not\" and \"and\", or \"or\" nor \"nor\" xor \"xor\" xnor \"xnor\" nand \"nand\" equals \"equals\" nequals \"not equals\" Examples : df = pd . DataFrame ([ A ]) t_table = ptt . PyTruthTable ( df = df ) t_table . append ( \"or\" , 0 , 0 ) # Simple 'or' operation t_table . set_text_symbols () # Change to text t_table . append ( \"or\" , 0 , 0 ) # Same 'or' operation t_table . table_df A A v A A or A True True True False False False generator \u00b6 | generator ( names = []) Generate a combination of True and False columns given a list of names . Arguments : names : Name of the columns. Returns : A dataframe with a binary combination using the list names . Example: t_table = ptt . PyTruthTable () t_table . generator ([ \"First\" , \"Second\" ]) First Second True True True False False True False False t_table = ptt . PyTruthTable () t_table . generator ([ \"First\" , \"Second\" , \"Third\" ]) First Second Third True True True True True False True False True True False False False True True False True False False False True False False False append \u00b6 | append ( operation , a_in , b_in = \"\" , name = \"\" ) Make a logical operation with column a_in and b_in . The new column will automatically append to the main dataframe. The new column name can be specified with name . a_in and b_in can be either a column name or number. Arguments : operation : Logical operation to be executed a_in : First column. (Left side) b_in : Second column. (Right side) Raises : NameError : Input column does not exist. NameError : Operation does not exist. ValueError : The operation needs b_in to also be specified append_df \u00b6 | append_df ( a_dataframe ) Append a custom dataframe to your truth table. The number of rows of a_dataframe must always match the current truth table. Arguments : a_dataframe : Dataframe to append Raises : TypeError : The parameter should be a dataframe RuntimeError : Number of rows of dataframe must match with current truth table column \u00b6 | column ( operation , a_in , b_in = \"\" , name = \"\" ) Return a column of logical operation with column a_in and b_in . The new column will NOT append to the main dataframe. The new column name can be specified with name . a_in and b_in can be either a column name or number. Arguments : operation : Logical operation to be executed a_in : First column. (Left side) b_in : Second column. (Right side) Raises : NameError : Input column does not exist. NameError : Operation does not exist. ValueError : The operation needs b_in to also be specified","title":"Code"},{"location":"code/#pytruthtablepytruthtable","text":"","title":"pyTruthTable.pyTruthTable"},{"location":"code/#pytruthtable","text":"class PyTruthTable (): | PyTruthTable ( names = [], df = pd . DataFrame ()) The constructor initialize a Truth Table with a list of names or with a custom dataframe. Initializing with a list of names means generating automatically all possible combination of True and False Arguments : names : Name of the columns. df : Initial Pandas' dataframe. Raises : UserWarning : If the initial df and names are specified simultaneously, the table generation is ignored due to possible table dimention conflicts. Only the initial dataframe is used. Example t_table = ptt . PyTruthTable ([ \"A\" , \"B\" , \"C\" ]) t_table . table_df A B C True True True True True False True False True True False False False True True False True False False False True False False False","title":"PyTruthTable"},{"location":"code/#set_default_spacing","text":"| set_default_spacing () By default, all symbols are spaced from the variable name.","title":"set_default_spacing"},{"location":"code/#set_no_spacing","text":"| set_no_spacing () Remove spaces from column's name. By default, all symbols are spaced from the variable name. Examples : t_table = ptt . PyTruthTable ([ \"A\" ]) t_table . append ( \"or\" , 0 , 0 ) # Simple 'or' operation t_table . set_no_spacing () # Remove spaces t_table . append ( \"or\" , 0 , 0 ) # Same 'or' operation t_table . table_df A A v A AvA True True True False False False","title":"set_no_spacing"},{"location":"code/#set_default_symbols","text":"| set_default_symbols () Name the new column using the default symbols. Notice that some operations does not contain symbols because they are a combination of other symbols. Operation Symbol implies \"\u2192\" nimplies \"\u219b\" converse \"\u2190\" nconverse \"\u219a\" not \"\u00ac\" and \"^\" or \"v\" nor \"\" xor \"\u2295\" xnor \"\" nand \"\" equals \"\u2194\" nequals \"\u21ae\"","title":"set_default_symbols"},{"location":"code/#set_text_symbols","text":"| set_text_symbols () Name the new column using the operation name instead of symbol. i.e: When using and operation your new column will be called A and B instead of A ^ B . Operation Text implies \"implies\" nimplies \"not implies\" converse \"converse\" nconverse \"not converse\" not \"not\" and \"and\", or \"or\" nor \"nor\" xor \"xor\" xnor \"xnor\" nand \"nand\" equals \"equals\" nequals \"not equals\" Examples : df = pd . DataFrame ([ A ]) t_table = ptt . PyTruthTable ( df = df ) t_table . append ( \"or\" , 0 , 0 ) # Simple 'or' operation t_table . set_text_symbols () # Change to text t_table . append ( \"or\" , 0 , 0 ) # Same 'or' operation t_table . table_df A A v A A or A True True True False False False","title":"set_text_symbols"},{"location":"code/#generator","text":"| generator ( names = []) Generate a combination of True and False columns given a list of names . Arguments : names : Name of the columns. Returns : A dataframe with a binary combination using the list names . Example: t_table = ptt . PyTruthTable () t_table . generator ([ \"First\" , \"Second\" ]) First Second True True True False False True False False t_table = ptt . PyTruthTable () t_table . generator ([ \"First\" , \"Second\" , \"Third\" ]) First Second Third True True True True True False True False True True False False False True True False True False False False True False False False","title":"generator"},{"location":"code/#append","text":"| append ( operation , a_in , b_in = \"\" , name = \"\" ) Make a logical operation with column a_in and b_in . The new column will automatically append to the main dataframe. The new column name can be specified with name . a_in and b_in can be either a column name or number. Arguments : operation : Logical operation to be executed a_in : First column. (Left side) b_in : Second column. (Right side) Raises : NameError : Input column does not exist. NameError : Operation does not exist. ValueError : The operation needs b_in to also be specified","title":"append"},{"location":"code/#append_df","text":"| append_df ( a_dataframe ) Append a custom dataframe to your truth table. The number of rows of a_dataframe must always match the current truth table. Arguments : a_dataframe : Dataframe to append Raises : TypeError : The parameter should be a dataframe RuntimeError : Number of rows of dataframe must match with current truth table","title":"append_df"},{"location":"code/#column","text":"| column ( operation , a_in , b_in = \"\" , name = \"\" ) Return a column of logical operation with column a_in and b_in . The new column will NOT append to the main dataframe. The new column name can be specified with name . a_in and b_in can be either a column name or number. Arguments : operation : Logical operation to be executed a_in : First column. (Left side) b_in : Second column. (Right side) Raises : NameError : Input column does not exist. NameError : Operation does not exist. ValueError : The operation needs b_in to also be specified","title":"column"},{"location":"contributing/","text":"Contributing to pyTruthTable \u00b6 We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer We Develop with Github \u00b6 We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests \u00b6 Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create a new branch from master . If you've added code that should be tested, add tests. If you've changed APIs, update the documentation. Ensure the test suite passes. Make sure your code lints. Issue that pull request! Any contributions you make will be under the MIT Software License \u00b6 In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern. Report bugs using Github's issues \u00b6 We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Write bug reports with detail, background, and sample code \u00b6 Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code if you can. Include a sample code that anyone can run to reproduce what I was seeing What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports. I'm not even kidding. Use a Consistent Coding Style \u00b6 4 spaces for indentation rather than tabs License \u00b6 By contributing, you agree that your contributions will be licensed under its MIT License.","title":"Contributing"},{"location":"contributing/#contributing-to-pytruthtable","text":"We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer","title":"Contributing to pyTruthTable"},{"location":"contributing/#we-develop-with-github","text":"We use github to host code, to track issues and feature requests, as well as accept pull requests.","title":"We Develop with Github"},{"location":"contributing/#we-use-github-flow-so-all-code-changes-happen-through-pull-requests","text":"Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create a new branch from master . If you've added code that should be tested, add tests. If you've changed APIs, update the documentation. Ensure the test suite passes. Make sure your code lints. Issue that pull request!","title":"We Use Github Flow, So All Code Changes Happen Through Pull Requests"},{"location":"contributing/#any-contributions-you-make-will-be-under-the-mit-software-license","text":"In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.","title":"Any contributions you make will be under the MIT Software License"},{"location":"contributing/#report-bugs-using-githubs-issues","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy!","title":"Report bugs using Github's issues"},{"location":"contributing/#write-bug-reports-with-detail-background-and-sample-code","text":"Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code if you can. Include a sample code that anyone can run to reproduce what I was seeing What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports. I'm not even kidding.","title":"Write bug reports with detail, background, and sample code"},{"location":"contributing/#use-a-consistent-coding-style","text":"4 spaces for indentation rather than tabs","title":"Use a Consistent Coding Style"},{"location":"contributing/#license","text":"By contributing, you agree that your contributions will be licensed under its MIT License.","title":"License"},{"location":"getting-started/","text":"Initializing a truth table \u00b6 pyTruthTable uses Pandas Dataframe in its structure. The library enables initialization of truth tables so all possible combinations of true and false are ready-to-use to create relations. There are two way of initializing a truth table: Method 1 - Use a String array \u00b6 import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . table_df Will result: A B True True True False False True False False Remember: You can always get your main truth table using tt.table_df . Method 2 - Use your own custom dataframe \u00b6 import pyTruthTable as ptt import pandas as pd # Create a custom dataframe to use as input dataf = pd . DataFrame ({ 'A' :[ True , True , False , False ], 'B' :[ True , False , True , False ]}) # Use 'df' parameter to initialize the truth table tt = ptt . PyTruthTable ( df = dataf ) tt . table_df Will result: A B True True True False False True False False Creating relations \u00b6 Appending a new column \u00b6 The logical relation between two columns can be computed using append(.) . The first parameter is the logic operation followed by the first and second argument. import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . append ( \"and\" , \"A\" , \"B\" ) A B A ^ B True True True True False False False True False False False False Indexing \u00b6 You can reference the existing columns with both column name or index . import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . append ( \"not\" , 0 ) # Column 0 = \"A\" tt . append ( \"or\" , \"B\" , - 1 ) # Index = -1 means the last column (not_A) A B \u00ac A B v (\u00ac A) True True False True True False False False False True True True False False True True Renaming a column \u00b6 The new column will always be named automaticaly with the operation, howerver you can specify the name for the new column. import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . append ( \"not\" , 0 , name = \"Banana\" ) # Banana = Not A tt . append ( \"nand\" , \"Banana\" , \"A\" ) A B Banana \u00ac ((Banana) ^ A) True True False True True False False True False True True True False False True True Generate a column without append \u00b6 You can use column(.) to only calculate and return the new column, without it being added to your main truth table table_df . import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . column ( \"and\" , \"A\" , \"B\" ) Will return: A ^ B True False False False Appending a new dataframe to the existing one \u00b6 You can append a custom dataframe using append_df(.) . The number of rows of each column must be the same. import pyTruthTable as ptt import pandas as pd # Initialize truth table tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) # Define your dataframe dataf = pd . DataFrame ({ 'C' :[ True , True , False , False ], 'D' :[ True , False , True , False ]}) # Append the new df tt . append_df ( dataf ) tt . table_df A B C D True True True True True False True False False True False True False False False False","title":"Getting started"},{"location":"getting-started/#initializing-a-truth-table","text":"pyTruthTable uses Pandas Dataframe in its structure. The library enables initialization of truth tables so all possible combinations of true and false are ready-to-use to create relations. There are two way of initializing a truth table:","title":"Initializing a truth table"},{"location":"getting-started/#method-1-use-a-string-array","text":"import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . table_df Will result: A B True True True False False True False False Remember: You can always get your main truth table using tt.table_df .","title":"Method 1 - Use a String array"},{"location":"getting-started/#method-2-use-your-own-custom-dataframe","text":"import pyTruthTable as ptt import pandas as pd # Create a custom dataframe to use as input dataf = pd . DataFrame ({ 'A' :[ True , True , False , False ], 'B' :[ True , False , True , False ]}) # Use 'df' parameter to initialize the truth table tt = ptt . PyTruthTable ( df = dataf ) tt . table_df Will result: A B True True True False False True False False","title":"Method 2 - Use your own custom dataframe"},{"location":"getting-started/#creating-relations","text":"","title":"Creating relations"},{"location":"getting-started/#appending-a-new-column","text":"The logical relation between two columns can be computed using append(.) . The first parameter is the logic operation followed by the first and second argument. import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . append ( \"and\" , \"A\" , \"B\" ) A B A ^ B True True True True False False False True False False False False","title":"Appending a new column"},{"location":"getting-started/#indexing","text":"You can reference the existing columns with both column name or index . import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . append ( \"not\" , 0 ) # Column 0 = \"A\" tt . append ( \"or\" , \"B\" , - 1 ) # Index = -1 means the last column (not_A) A B \u00ac A B v (\u00ac A) True True False True True False False False False True True True False False True True","title":"Indexing"},{"location":"getting-started/#renaming-a-column","text":"The new column will always be named automaticaly with the operation, howerver you can specify the name for the new column. import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . append ( \"not\" , 0 , name = \"Banana\" ) # Banana = Not A tt . append ( \"nand\" , \"Banana\" , \"A\" ) A B Banana \u00ac ((Banana) ^ A) True True False True True False False True False True True True False False True True","title":"Renaming a column"},{"location":"getting-started/#generate-a-column-without-append","text":"You can use column(.) to only calculate and return the new column, without it being added to your main truth table table_df . import pyTruthTable as ptt tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) tt . column ( \"and\" , \"A\" , \"B\" ) Will return: A ^ B True False False False","title":"Generate a column without append"},{"location":"getting-started/#appending-a-new-dataframe-to-the-existing-one","text":"You can append a custom dataframe using append_df(.) . The number of rows of each column must be the same. import pyTruthTable as ptt import pandas as pd # Initialize truth table tt = ptt . PyTruthTable ([ \"A\" , \"B\" ]) # Define your dataframe dataf = pd . DataFrame ({ 'C' :[ True , True , False , False ], 'D' :[ True , False , True , False ]}) # Append the new df tt . append_df ( dataf ) tt . table_df A B C D True True True True True False True False False True False True False False False False","title":"Appending a new dataframe to the existing one"},{"location":"license/","text":"MIT License Copyright (c) 2020 Leonardo Mariga Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"operations/","text":"Supported operations \u00b6 pyTruthTable Supports the following operations: Operation Text implies \"implies\" nimplies \"not implies\" converse \"converse\" nconverse \"not converse\" not \"not\" and \"and\", or \"or\" nor \"nor\" xor \"xor\" xnor \"xnor\" nand \"nand\" equals \"equals\" nequals \"not equals\" Example all operations \u00b6 df = pd . DataFrame ({ 'A' :[ True , True , False , False ], 'B' :[ True , False , True , False ]}) t_table = ptt . PyTruthTable ( df = df ) t_table . append ( \"not\" , 0 ) t_table . append ( \"and\" , 0 , 1 ) t_table . append ( \"or\" , 0 , 1 ) t_table . append ( \"xor\" , 0 , 1 ) t_table . append ( \"nor\" , 0 , 1 ) t_table . append ( \"nand\" , 0 , 1 ) t_table . append ( \"xnor\" , 0 , 1 ) t_table . append ( \"equals\" , 0 , 1 ) t_table . append ( \"nequals\" , 0 , 1 ) t_table . append ( \"implies\" , 0 , 1 ) t_table . append ( \"nimplies\" , 0 , 1 ) t_table . append ( \"converse\" , 0 , 1 ) t_table . append ( \"nconverse\" , 0 , 1 ) t_table . table_df A B \u00ac A A ^ B A v B A \u2295 B \u00ac (A v B) \u00ac (A ^ B) \u00ac (A \u2295 B) A \u2194 B A \u21ae B A \u2192 B A \u219b B A \u2190 B A \u219a B True True False True True False False False True True False True False True False True False False False True True False True False False True False True True False False True True False True True False True False False True True False False True False False True False False False True True True True False True False True False","title":"Operations"},{"location":"operations/#supported-operations","text":"pyTruthTable Supports the following operations: Operation Text implies \"implies\" nimplies \"not implies\" converse \"converse\" nconverse \"not converse\" not \"not\" and \"and\", or \"or\" nor \"nor\" xor \"xor\" xnor \"xnor\" nand \"nand\" equals \"equals\" nequals \"not equals\"","title":"Supported operations"},{"location":"operations/#example-all-operations","text":"df = pd . DataFrame ({ 'A' :[ True , True , False , False ], 'B' :[ True , False , True , False ]}) t_table = ptt . PyTruthTable ( df = df ) t_table . append ( \"not\" , 0 ) t_table . append ( \"and\" , 0 , 1 ) t_table . append ( \"or\" , 0 , 1 ) t_table . append ( \"xor\" , 0 , 1 ) t_table . append ( \"nor\" , 0 , 1 ) t_table . append ( \"nand\" , 0 , 1 ) t_table . append ( \"xnor\" , 0 , 1 ) t_table . append ( \"equals\" , 0 , 1 ) t_table . append ( \"nequals\" , 0 , 1 ) t_table . append ( \"implies\" , 0 , 1 ) t_table . append ( \"nimplies\" , 0 , 1 ) t_table . append ( \"converse\" , 0 , 1 ) t_table . append ( \"nconverse\" , 0 , 1 ) t_table . table_df A B \u00ac A A ^ B A v B A \u2295 B \u00ac (A v B) \u00ac (A ^ B) \u00ac (A \u2295 B) A \u2194 B A \u21ae B A \u2192 B A \u219b B A \u2190 B A \u219a B True True False True True False False False True True False True False True False True False False False True True False True False False True False True True False False True True False True True False True False False True True False False True False False True False False False True True True True False True False True False","title":"Example all operations"}]}